<?xml version="1.0" encoding="utf-8"?>
<!-- fonts/DeviceFont.mxml -->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="575" height="325"
			   creationComplete="testFlashPlayer()" 
			   pageTitle="Inference Games"
			   activate="ScriptInterface.signalActivation()" 
			   deactivate="ScriptInterface.signalDeactivation()"
			   backgroundColor="#CCCCCC">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import common.DGInterface;
			import common.ParkMiller;
			import common.ScriptInterface;
			import common.VersionChecker;
			
			import embedded_asset_classes.DebugConsoleSWC;
			import embedded_asset_classes.InferenceEvent;
			import embedded_asset_classes.SpaceRace;
			
			import flash.external.ExternalInterface;
			import flash.utils.Timer;
			
			// ----------------------
			// --- PRIVATE SECTION ---
			// ----------------------
						
			private static const kMinimumRequiredVersion:Number = 11.6;	// the oldest version of flash player you can play this game on.
			private static const kDebugMode:Boolean = true; 			// set this to false, and the debug version will behave exactly like the release version.
			private static const kVersion:String = "v.2014.01.08";
			private static const kEventsCollectionName:String = "Events";
			private static const kGamesCollectionName:String = "Games";
			private static const kCreditsTextHTML:String = 
				"<b>Inference</b> is a <font color='#2C4877'><u><a href='http://www.srri.umass.edu/datagames' target='inferenceInfo'>Data Game</a></u></font> "+
				"created by the <font color='#2C4877'><u><a href='http://www.srri.umass.edu/serg' target='inferenceInfo'>Statistics Education Research Group</a></u></font> "+
				"at <font color='#2C4877'><u><a href='http://www.srri.umass.edu' target='inferenceInfo'>SRRI</a></u></font>. "+
				"Contributers to the concept, design and development include the " +
				"Research and Activities team: Clifford Konold, Kosoom (Jang) Kreetong; "+
				"Developers: Craig D. Miller; "+
				"Student Programmers: Russ Phelan, Mike Salyh, Ryan McCann. "+
				"Artist: Mike Salyh. "+
				"Funded by the National Science Foundation, award "+
				"<font color='#2C4877'><u><a href='http://www.nsf.gov/awardsearch/showAward?AWD_ID=0918653&amp;HistoricalAwards=false' target='inferenceInfo'>DRL-0918653</a></u></font> (2009-2014). "+
				"Inference is open source on <font color='#2C4877'><u><a href='https://github.com/serg-srri-umass/TP-data-games/wiki' target='inferenceInfo'>Github</a></u></font>. "+
				"Copyright (c) 2013<span class='x'>-2014 by University of Massachusetts Amherst.";
			
			private static var staticStage:Stage; // a reference to the stage of this MXML file.

			private var sDebugConsole:DebugConsoleSWC;
			public var sSpaceRace:SpaceRace;
			private var sExpertAI:ExpertAI;
			private var videoPlayer:Object;	// The Youtube video player for the intro video
			//private var mVideoButton:MovieClip = new videoMVC();  // the button on the top-bar that prompts you to watch the instructional video.

			private var mDGInterface:DGInterface = null;	// interface to Data Games container application (if present)	
			private var mGameSerialNum:int	= 0; // first game starts with serial number 1.
			private var mGameLevel:int		= 1; // which level (1+) is the current game using.
			
			public static var instance:InferenceGames = null;
			public var randomizer:ParkMiller = null;
			public var isInGame:Boolean = false; // whether there is a game currently going on.
			[Bindable]
			public var unlockedLevels:uint = 1; // how many levels the player has unlocked.
			
			// this method ensures that the flash player is a recent enough version to work.
			private function testFlashPlayer():void {
				if( VersionChecker.isValid(kMinimumRequiredVersion))
					startUp();
				 else
					BrickWall.visible = true;
			}
			
			private function startUp():void{
				if( instance == null )
					instance = this;
				
				this.randomizer = new ParkMiller(); // must instantiate just once to set random seed according to current date-time.
				BrickWall.visible = false;
				
				initVisualElements();
				sExpertAI = new ExpertAI(SpaceRaceControls.INSTANCE);
				
				mDGInterface = new DGInterface( VersionChecker.isDebug && kDebugMode );
				this.sendCollectionData();				// initialize the DG/TinkerPlots data interface (and set up Graph and Table parameters)
				mDGInterface.createGraphIfNone();		// create a Graph view in DG, if not present already
				
				//listen for events from Space Race Module 
				sSpaceRace.addEventListener(InferenceEvent.REQUEST_NEW_ROUND, newRoundHandler);
				sSpaceRace.addEventListener(InferenceEvent.REQUEST_SAMPLE, requestSampleHandler);

				sSpaceRace.addEventListener(InferenceEvent.REQUEST_NEW_GAME, newGame);
				sSpaceRace.addEventListener(InferenceEvent.REQUEST_END_GAME, endGame);
				
				sSpaceRace.addEventListener(InferenceEvent.CORRECT_GUESS, handleCorrectGuess);
				sSpaceRace.addEventListener(InferenceEvent.INCORRECT_GUESS, handleIncorrectGuess);				

				sSpaceRace.addEventListener(InferenceEvent.REQUEST_GUESS_MODE_EXPERT, sSpaceRace.prepareGuessExpert);
				sSpaceRace.addEventListener(InferenceEvent.REQUEST_GUESS_MODE_HUMAN, sSpaceRace.prepareGuessHuman);

				sSpaceRace.addEventListener(InferenceEvent.REQUEST_CHANGE_LEVEL, onClickLevelsButton);

				//hide interval & IQR bars on startup
				sSpaceRace.bodyMVC.setPossibleIQRs();
				sSpaceRace.bodyMVC.setPossibleIntervals();
			}
			
			// called after Human or Expert guess is made, to end the round, see also handleIncorrectGuess()
			private function handleCorrectGuess( triggerEvent:Event = null):void{
				var feedbackHeaderText:String = "", feedbackBodyText:String = "";
				if(sSpaceRace.activePlayerIsHuman){ //you
					feedbackHeaderText = "You guessed correctly!";
					Round.currentRound.resultString = "You Won";
					if( Round.currentRound.wasLucky())
						feedbackBodyText = "You got lucky.";
					sSpaceRace.earnPointHuman();
				} else { // expert
					feedbackHeaderText = "The expert guessed correctly!";
					Round.currentRound.resultString = "Expert won";
					if( Round.currentRound.wasLucky())
						feedbackBodyText = "The expert got lucky.";
					sSpaceRace.earnPointExpert();
				}
				
				// unlocking levels:
				if( sSpaceRace.expertScore >= sSpaceRace.WINNING_SCORE || sSpaceRace.humanScore >= sSpaceRace.WINNING_SCORE){
					if(sSpaceRace.humanScore >= sSpaceRace.WINNING_SCORE){
						if(unlockedLevels <= Round.currentRound.level){
							unlockedLevels = Round.currentRound.level + 1;
						}
						feedbackHeaderText = "You win!";
					}
					else{
						feedbackHeaderText = "The expert wins";
					}
				}
				
				if( sSpaceRace.expertScore >= sSpaceRace.WINNING_SCORE || sSpaceRace.humanScore >= sSpaceRace.WINNING_SCORE){
					sSpaceRace.bodyMVC.showFeedback(feedbackHeaderText, feedbackBodyText, false);	// bring up the feedback screen
				}else{
					sSpaceRace.bodyMVC.showFeedback(feedbackHeaderText, feedbackBodyText, true, "Next Round");
				}
				
				endRound();
			}
			
			// called after Human or Expert guess is made, to end the round, see also handleCorrectGuess()		
			private function handleIncorrectGuess( triggerEvent:Event = null):void{
				var feedbackHeaderText:String = "", feedbackBodyText:String = "";
				if(sSpaceRace.activePlayerIsHuman){
					feedbackHeaderText = "You missed!";
					Round.currentRound.resultString = "You lost";
					if( Round.currentRound.wasUnlucky())
						feedbackBodyText = "You were unlucky. Keep trying!";
					sSpaceRace.earnPointExpert();
					sSpaceRace.earnPointExpert();
				} else {
					feedbackHeaderText = "The expert missed!";
					Round.currentRound.resultString = "Expert lost";
					if( Round.currentRound.wasUnlucky())
						feedbackBodyText = "The expert was unlucky.";
					sSpaceRace.earnPointHuman();
					sSpaceRace.earnPointHuman();
				}
				
				if( sSpaceRace.expertScore >= sSpaceRace.WINNING_SCORE || sSpaceRace.humanScore >= sSpaceRace.WINNING_SCORE){
					if(sSpaceRace.humanScore >= sSpaceRace.WINNING_SCORE){
						feedbackHeaderText = "You win!";
					}
					else{
						feedbackHeaderText = "The expert wins";
					}
				}
				
				if( sSpaceRace.expertScore >= sSpaceRace.WINNING_SCORE || sSpaceRace.humanScore >= sSpaceRace.WINNING_SCORE){
					sSpaceRace.bodyMVC.showFeedback(feedbackHeaderText, feedbackBodyText, false);	// bring up the feedback screen
				}else{
					sSpaceRace.bodyMVC.showFeedback(feedbackHeaderText, feedbackBodyText, true, "Next Round");
				}
				
				endRound();
			}
			
			
			//handles requestNewRound events from SpaceRace interface
			private function newRoundHandler( triggerEvent:Event = null):void{
				// end the old round if there was one
				if(Round.currentRound){
					endRound();
				}
				newRound();
			}
			
			//handles requestSample events from SpaceRace interface
			private function requestSampleHandler(e:Event):void{
				var sampledData:Vector.<Number> = sSpaceRace.sampleData();
				Round.currentRound.addData(sampledData);
				InferenceGames.instance.sendEventData( sampledData, sSpaceRace.getDataSpeed() ); //send vector of data to DG
			}
			
			private function initVisualElements():void{	
				staticStage = systemManager.stage;
				
				sSpaceRace = new SpaceRace( staticStage, toggleAboutScreen, showVideo);
				gameContainer.addChild(sSpaceRace);
				sSpaceRace.establishLevels( ["Level 1", Round.kLevelSettings.getItemAt(0).iqr, Round.kLevelSettings.getItemAt(0).interval,  click_lvl1Btn],
					["Level 2", Round.kLevelSettings.getItemAt(1).iqr, Round.kLevelSettings.getItemAt(1).interval,  click_lvl2Btn],
					["Level 3", Round.kLevelSettings.getItemAt(2).iqr, Round.kLevelSettings.getItemAt(2).interval,  click_lvl3Btn],
					["Level 4", Round.kLevelSettings.getItemAt(3).iqr, Round.kLevelSettings.getItemAt(3).interval,  click_lvl4Btn]);
				
				sDebugConsole = new DebugConsoleSWC();
				gameContainer.addChild(sDebugConsole);
				sDebugConsole.x = 86;
				sDebugConsole.y = 25;
				
				initVideoPlayer();
			}
			
			// init the 'play video' button & prompt.
			private function initVideoPlayer():void {
				/*
				videoBtnContainer.addChild(mVideoButton);
				mVideoButton.x = 600;
				mVideoButton.y = 15;
				
				// all the things that will make the 'click here' prompt go away go here.
				// they need matching 'removeEventListeners' in the closePrompt method.
				
				this.systemManager.stage.addEventListener(MouseEvent.MOUSE_DOWN, closePrompt);
				mVideoButton.videoBtn.addEventListener( MouseEvent.MOUSE_OVER, showHidePrompt);
				mVideoButton.videoBtn.addEventListener( MouseEvent.MOUSE_OUT, showHidePrompt);
				mVideoButton.aboutBtn.addEventListener( MouseEvent.MOUSE_OVER, hideBouncePrompt);
				mVideoButton.aboutBtn.addEventListener( MouseEvent.CLICK, showHideAboutScreen);
				mVideoButton.muteMVC.visible = false;
				
				// this is the method that will be called when the button is clicked on.
				mVideoButton.videoBtn.addEventListener( MouseEvent.CLICK, showVideo);
				*/
				
				//systemManager.stage.addEventListener(Event.MOUSE_LEAVE, onMouseLeave);
				
				//Embedded Youtube video
				var videoID:String = "RnjgJVm4GX0";  // youtube.com video ID (v=) on https://www.youtube.com/user/sergsrri
				
				Security.allowDomain("youtube.com"); //Allow flash to load assets from youtube
				Security.allowDomain("s.ytimg.com");
				
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);
				loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3"));
				//loader.load(new URLRequest("http://www.youtube.com/v/"+videoID+"?version=3&modestbranding=1&showinfo=1")); //player with controls
				
				function onLoaderInit(event:Event):void {
					videoHolder.addChild(loader);
					loader.content.addEventListener("onReady", onPlayerReady);
					function onPlayerReady(event:Event):void {
						videoPlayer = loader.content;
						videoPlayer.setSize(570, 360);
						videoPlayer.loadVideoById(videoID);
						videoPlayer.pauseVideo();
						videoPlayer.addEventListener("onStateChange", onVideoStateChange);
					}
				}
			}
			
			// ------------------
			// --- DG SECTION ---
			// ------------------
			
			// Send the Game-level and Event-level structure to DG, if connected to DG.  
			// 		The collections are the tables of cases and attributes.
			private function sendCollectionData( ):void	{
				var initGameArgs:Object = 
					{
						name: "InferenceGames",
						dimensions: { width: this.width, height: this.height },
						gameEmbedID: 'InferenceGames', // must match the ID of ChainSaw.swf embedded in the DG page by ChainSaw.html
						gameEmbedFunc: 'doCommandFunc', // callback function name to be used by DG/javascript
						collections: [
							{
								name: kGamesCollectionName,
								attrs:[
									{ name: "Game", type: "numeric", precision: 0, description: "Sequential Game Number" },
									{ name: "Round", type: "numeric", precision: 0, description: "Sequential Round Number" },
									{ name: "Interval", type: "numeric", precision: 0, description: "How close a guess has to be to the true value" },
									{ name: "IQR", type: "numeric", precision: 0, description: "Inter-Quartile Range (IQR) of distribution" }, 
									{ name: "SampleSize", type: "numeric", precision: 0, description: "Number of data values generated (sampled) during the round" },
									{ name: "Result", type: "nominal", description: "Who guessed and whether they won or lost." },
									{ name: "ProbWin", type: "numeric", precision: 0, description: "Probability of winning"}
								] ,
								childAttrName: "Events_Record"
							},
							{
								name: kEventsCollectionName,
								attrs:	[
									{ name: "Round", type: "nominal", description: "Which round of the current game"   } ,
									{ name: "Value", type: "numeric", precision: 0, defaultMin: 0, defaultMax: 100, description: "Value of data point generated"   }
								],
								labels: {
									singleCase: "value sent",
									pluralCase: "values sent",
									singleCaseWithArticle: "a value sent",
									setOfCases: "events",
									setOfCasesWithArticle: "events"
								},
								defaults: { xAttr: "Value", yAttr: "Round" }
							}
						] // collections
					};
				ExternalInterface.addCallback( "doCommandFunc", doCommandFromDG ); // make {InferenceGames.swf}.doCommandFromDG() callable from javascript/DG
				this.mDGInterface.initGame( initGameArgs );
			}
			
			// handle a command from DG, such as 'restoreState' or 'saveState'.  
			// 		this.startUp( ) registers this callback function with DG,
			// 		so DG can ask for game state then restore that game state when a DG document is saved then later opened.
			// 		expecting string from DG like: '{ operation: 'restoreState', args: { state: restoredGameState }}'
			public function doCommandFromDG( commandString:String ):String {
				var resultObj:Object = { success: false },
					result:String,
					commandObj:Object = com.adobe.serialization.json.JSON.decode( commandString );
				
				if( commandObj.operation == 'saveState' ) {
					resultObj = this.saveStateforDG( commandObj.args );
				} else if (commandObj.operation == 'restoreState' ) {
					resultObj = this.restoreStateforDG( commandObj.args );
				}		
				if( resultObj )
					result = com.adobe.serialization.json.JSON.encode( resultObj );
				return result;
			}
			
			// handle a 'saveState' command from DG, to stave this game in a document  
			// 		We return information to be passed back to the this game with a restoreStateForDg() call.
			//		Warning: must be compatible with different versions of restoreStateforDG()
			//		Returns { success: true, state: {} }
			private function saveStateforDG( args:Object ):Object {
				var stateObj:Object = 
					{
						success: true,
						state: {
							stateVersion: 1, // increment only if needed by restoreStateForDG()
							gameNumber:	this.mGameSerialNum,
							gameLevel:	this.mGameLevel,
							inGame:		this.isInGame,
							unlockedTo:	this.unlockedLevels,
							roundID:	Round.currentRound.roundID,
							humanScore:		this.sSpaceRace.humanScore,
							expertScore:		this.sSpaceRace.expertScore
						}
					};
				return stateObj;
			}
			
			// handle a 'restoreState' command from DG, to restore a game saved in a document.  
			// 		Handles parameters created by a previous save of saveStateForDG()
			//		Warning: must be backward compatible with data created by older versions of saveStateForDG()
			// 		Returns { success: true/false }
			private function restoreStateforDG( args:Object ):Object {
				var iState:Object = args.state,
					result:Object = { success: false };
				if( iState )  // restore our parameters as independently as possible
				{
					if( iState.unlockedTo && iState.unlockedTo >= 1 ) {
						this.unlockedLevels = iState.unlockedTo; // OK if unlockedTo is above Round.kLevelSettings.length
					}
					if( iState.roundID && iState.roundID >= 1 ) {
						// TO-DO: Round.currentRound.setRoundID( iState.roundID );
					}
					if( iState.gameNumber ) {
						this.mGameSerialNum = iState.gameNumber;
						// TO-DO: check isInGame and do something different if in game?
					}
					if( iState.gameLevel) {
						if( iState.gameLevel >= 0 && iState.gameLevel < Round.kLevelSettings.length ) { // must be a valid level for this version
							// TO-DO: set the level (make sure we are at the start of a game)
							// LevelSelectSWC.instance.getSelectedLevelNumber();
						}
						// else ignore invalid levels
					}
					if( iState.score ) {
//						Alert.show("s2 " +sSpaceRace.score);
						sSpaceRace.humanScore = iState.humanScore;
						for(var i:int=0; i<iState.humanScore; i++){
							sSpaceRace.earnPointHuman();
						}
					}
					if( iState.life ) {
						sSpaceRace.expertScore = iState.expertScore;
						for(var j:int=0; j<iState.expertScore; j++){
							sSpaceRace.earnPointExpert();
						}
					}
					result.success = true;
				}
				return result;
			}			
			
			// get the game case data to send to DG, 
			// returned as an array for use by sendGameDataOpen(),..Update(),...Close().
			public function getGameCaseValues( iIsRoundOver:Boolean = false ):Array {
				return [
					mGameSerialNum, // Game number starting with 1 since launch of application.
					Round.currentRound.roundID,
					Round.currentRound.interval,
					Round.currentRound.IQR,
					Round.currentRound.numDataSoFar,
					(iIsRoundOver ? Round.currentRound.getResultsString() : ""), // Result string, "You Won!/You Lost!", "Expert Won!/Expert Lost!" 
					(iIsRoundOver ? Round.currentRound.accuracy : "") // if game is over, submit accuracy with current sample size. Otherwise, submit the empty string. 
				];
			}

			// Send event case data to DG, if connected to DG.
			// 		Event data "data point generated" events, with one array value per Event attribute
			// 		caseValueArrays is an array of cases, and each case is a array of attribute values for that case (corresponding to the attributes previously sent)
			//		dataSpeed is the time between single cases in milliseconds; we want sending of data to match data appearance in game
			public function sendEventData( caseValueArrays:Vector.<Number>, dataSpeedinMS:uint ):void {
				
				//converts number vector from SpaceRace into array for DG
				var convertArray:Array = new Array();
				for each (var elem:Number in caseValueArrays) {
					convertArray.push([Round.currentRound.roundID, elem]);
				}
				
				var timer:Timer = new Timer(dataSpeedinMS);
				timer.addEventListener(TimerEvent.TIMER, sendSingleDataPoint);
				timer.start();
				
				var count:int = 0;
				function sendSingleDataPoint(e:Event):void {
					if( count < convertArray.length) {
						mDGInterface.createEventCases( kEventsCollectionName, [convertArray[count]] );
						count++;
					} else {
						timer.stop();
					}
				}
				
				mDGInterface.updateOrCloseGameCase( kGamesCollectionName, getGameCaseValues());
			}
			
			// ----------------------
			// --- PUBLIC SECTION ---
			// ----------------------
			
			public static function get stage():Stage{
				return staticStage;
			}
			
			// start a new round as requested
			public function newRound():void{
				
				// make sure that old round is finished
				if(Round.currentRound){
					if(mDGInterface.isGameCaseOpen()) { throw new Error("Old game case not closed before new Round"); }
				}

				// create the new round
				var thisRound:Round = new Round( mGameLevel); // accessed via Round.currentRound from here forward.
				setGameAndRoundLabel( mGameSerialNum, Round.currentRound.roundID );
				
				// update DG: open and send a new game case for each round
				mDGInterface.sendLog( "newRound:"
					+" round="+Round.currentRound.roundID
					+" population-median="+Round.currentRound.populationMedian
					+" IQR="+Round.currentRound.IQR
					+" interval="+Round.currentRound.interval
					+" chunkSize="+Round.currentRound.chunkSize
					//+" expert-confidence-percent="+ExpertAI.confidenceIntervalPercent
					//+" expert-guess-N="+ExpertAI.guessNumSamples 
				);
				mDGInterface.openGameCase( kGamesCollectionName, getGameCaseValues());
				mDGInterface.deletePreviousCaseData(); // deletes old graph data to reduce clutter
				
				//send new round info to Space Race
				sSpaceRace.newRound( Round.currentRound.IQR, Round.currentRound.interval, Round.currentRound.populationMedian, Round.currentRound.chunkSize);
			}
			
			// end the round started with newRound()
			public function endRound():void{
				
				// update and close the old round data in DG
				// closing the game case prevents further updating of the Round data.
				if( Round.currentRound && mDGInterface.isGameCaseOpen())
					mDGInterface.updateOrCloseGameCase( kGamesCollectionName, getGameCaseValues( DGInterface.kCloseCase ), DGInterface.kCloseCase );
			}

			// this method is called when the score reaches 6. Shows the 'you win' // 'expert wins' display
			public function winLoseGame( user:Boolean = true):void{
				if(user && mGameLevel == unlockedLevels) // if the player beats their current level, unlock the next.
					unlockedLevels++;
			}
			
			// Start a new game.  Each game has multiple rounds
			public function newGame( triggerEvent:Event = null):void {
				sSpaceRace.bodyMVC.controlsMVC.hideMainMenu(); // hide the main menu, if it was showing.
				
				++mGameSerialNum;
				isInGame = true;
								
				mDGInterface.sendLog( "newGame: GameNumber="+mGameSerialNum+" Level="+mGameLevel );
				
				// set up the new game interface which calls this.newRoundHandler() which calls this.NewRound()
				// TO-DO: modify this so newRound() can be called directly to de-tangle the calling logic.
				// and probably the update of possibleIQRs and Intervals should happen every round instead?  (CDM 2012-12-26)				
				var possibleIQRs:Array = [12,9,7,3,1], 
					startingIQR:Number = 7, 
					possibleIntervals:Array = [4,3,2,1], 
					startingInterval:Number = 1;
				sSpaceRace.newGame( possibleIQRs, startingIQR, possibleIntervals, startingInterval, mGameLevel);
				newRoundHandler();
			}
			
			// called when 'end game' btn is clicked. Clears the stage, and resets the scores.
			public function endGame( triggerEvent:Event = null):void{      			
				// end the old round if there was one
				if(Round.currentRound){
					endRound();
					Round.currentRound.roundID = 0; // first round of new game is round 1
				}
				setGameAndRoundLabel(); // clear the label
				isInGame = false;
				sSpaceRace.endGame();
				sSpaceRace.showMainMenu( unlockedLevels);
			}
			
			// display the given Game and Round numbers, or hide the old number display if passed zeros. 
			//		setGameAndRoundLabel(1,3) => "Game 1, Round 3"
			//		setGameAndRoundLabel() => ""
			public function setGameAndRoundLabel( gameNumber:int=0, roundNumber:int=0 ): void {
				if( gameNumber < 1 || roundNumber < 1 ) {
					mGameAndRoundLabel.text = "";
				} else {
					mGameAndRoundLabel.text = "Game "+gameNumber+", Round "+Round.currentRound.roundID;
				}
			}
			
			// function called when clicking the levels button.
			private function onClickLevelsButton(e:Event = null):void
			{
				levelScreen.visible = !levelScreen.visible;
			}
			
			private function click_lvl1Btn(e:Event):void{
				mGameLevel = 1;
				sSpaceRace.topBarMVC.setTitleMessage("LEVEL 1");
				levelScreen.visible = false;
				newGame();
			}
			private function click_lvl2Btn(e:Event):void{
				if(unlockedLevels >= 2){	// this is a band-aid. For some reason, the disabled level buttons are still able to be clicked on. So, don't let the method execute unless level 2 is really unlocked.
					mGameLevel = 2;
					sSpaceRace.topBarMVC.setTitleMessage("LEVEL 2");
					levelScreen.visible = false;
					newGame();
				}
			}
			private function click_lvl3Btn(e:Event):void{
				if(unlockedLevels >= 3){
					mGameLevel = 3;
					sSpaceRace.topBarMVC.setTitleMessage("LEVEL 3");
					levelScreen.visible = false;
					newGame();
				}
			}
			private function click_lvl4Btn(e:Event):void{
				if(unlockedLevels >= 4){
					mGameLevel = 4;
					sSpaceRace.topBarMVC.setTitleMessage("LEVEL 4");
					levelScreen.visible = false;
					newGame();
				}
			}
			
			//Video functions
			private function showVideo(e:Event = null):void
			{
				if(IntroVideo.visible == true)
				{
					if(videoPlayer != null)
						videoPlayer.pauseVideo();
					
					IntroVideo.visible = false;
				}
				else
				{
					IntroVideo.visible = true;
					videoPlayer.playVideo();
				}
			}
			private function hideVideo():void
			{
				videoPlayer.pauseVideo();
				IntroVideo.visible = false;
			}
			
			private function toggleAboutScreen(e:Event = null):void{
				aboutScreen.visible = !aboutScreen.visible;
			}
			
			private function playPauseVideo():void
			{
				var PLAYING_VIDEO:Number = 1;
				if(videoPlayer.getPlayerState() == PLAYING_VIDEO) {
					videoPlayer.pauseVideo();
				} else {
					videoPlayer.playVideo();
				}
			}
			private function replayVideo():void
			{
				videoPlayer.seekTo(0, true);
				videoPlayer.playVideo();
			}
			private function onVideoStateChange(e:Event):void
			{
				var PLAY:int=1, PAUSE:int=2;
				var state:int = Object(e).data;
				switch(state)
				{
					case PLAY:
						playPauseBtn.label = "Pause"; break;
					case PAUSE:
						playPauseBtn.label = "Play"; break;
				}
			}			
			
			// toggles the visibilty of the about screen
			private function showHideAboutScreen( triggerEvent:MouseEvent):void{
				aboutScreen.visible = !aboutScreen.visible;
			}
		]]>
	</fx:Script>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		.sansFontClass {
			fontFamily: Arial, Helvetica, "_sans";
			fontSize: 12;
		}
	</fx:Style>
	
	<!-- the game's background -->
	<s:BorderContainer id="background" y="36" width="575" height="255">
		<s:backgroundFill>
			 <!-- <s:RadialGradient scaleX="1000" scaleY="1000">
				<s:GradientEntry color="0xcad7eb"/>
				<s:GradientEntry color="0x8C7A8B"/>
			</s:RadialGradient> -->
			<s:SolidColor color="0xbfcfe6"/>
		</s:backgroundFill>
	</s:BorderContainer>
	
	<!-- the UI component that holds all the game's SWC's -->
	<mx:UIComponent id="gameContainer" x="0" y="0"/>
	
	<s:Label id="mVersionLabel" x="{(this.width+mVersionLabel.width)/2}" y="5" width="100" height="50"
			 color="0x777777" initialize="mVersionLabel.text=kVersion" 
			 fontFamily="_sans" fontSize="9" textAlign="center" verticalAlign="top"/>
	<s:Label id="mGameAndRoundLabel" x="14" y="23" width="100" height="50"
			 color="0x8fa0c1"
			 fontFamily="_sans" fontSize="9" textAlign="left" verticalAlign="top"/>
	
	<!-- Level Selection screen (temporary) -->
	<s:BorderContainer id="levelScreen" x="{30}" y="{30}" width="{this.width-(2*levelScreen.x)}" height="{this.height-(2*levelScreen.y)}" cornerRadius="5" styleName="sansFontClass" visible="false" depth="800">
		<s:filters>
			<s:DropShadowFilter 
				blurX="25" blurY="25" 
				alpha="0.8" />
		</s:filters>
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xf0f0f0"/>
				<s:GradientEntry color="0xd8d8d8"/>
			</s:LinearGradient>
		</s:backgroundFill>
		<s:Label text="Levels" width="{levelScreen.width}" y="20" fontSize="22" textAlign="center"/>
		
		<s:Button id="lvl1Btn" label="Level 1   ( IQR: {Round.kLevelSettings.getItemAt(0).iqr}, Interval: {Round.kLevelSettings.getItemAt(0).interval} )" enabled="{unlockedLevels >= 1}" click="click_lvl1Btn(event)" width="180" x="{(levelScreen.width-180)/2}" y="70" />
		<s:Button id="lvl2Btn" label="Level 2   ( IQR: {Round.kLevelSettings.getItemAt(1).iqr}, Interval: {Round.kLevelSettings.getItemAt(1).interval} )" enabled="{unlockedLevels >= 2}" click="click_lvl2Btn(event)" width="180" x="{(levelScreen.width-180)/2}" y="{lvl1Btn.y + 32}"/>
		<s:Button id="lvl3Btn" label="Level 3   ( IQR: {Round.kLevelSettings.getItemAt(2).iqr}, Interval: {Round.kLevelSettings.getItemAt(2).interval} )" enabled="{unlockedLevels >= 3}" click="click_lvl3Btn(event)" width="180" x="{(levelScreen.width-180)/2}" y="{lvl2Btn.y + 32}"/>
		<s:Button id="lvl4Btn" label="Level 4   ( IQR: {Round.kLevelSettings.getItemAt(3).iqr}, Interval: {Round.kLevelSettings.getItemAt(3).interval} )" enabled="{unlockedLevels >= 4}" click="click_lvl4Btn(event)" width="180" x="{(levelScreen.width-180)/2}" y="{lvl3Btn.y + 32}"/>
		
		<s:Button id="closeLevelsButton" x="405" y="215" width="90" height="30" label="Cancel" click="levelScreen.visible=false;" fontSize="12" fontWeight="bold"/>
	</s:BorderContainer>
	
	<!-- Contains Intro video -->
	<s:BorderContainer id="IntroVideo" x="0" y="25" width="{this.width}" height="{this.height-25}" visible="false" backgroundColor="#dcd0c0" styleName="sansFontClass" borderVisible="false" depth="700">
		<mx:UIComponent	id="videoHolder" x="{(this.width-570)/2}" y="0"/>
		<s:Group id="videoControlsContainer" x="{(this.width-this.videoControlsContainer.width)/2}" y="{this.height-this.videoControlsContainer.height-25}">
			<s:Button id="playPauseBtn" label="Pause" click="playPauseVideo()" x="0" />
			<s:Button id="replayBtn" label="Replay" click="replayVideo()" x="{playPauseBtn.width + 5}"/>
			<s:Button id="closeVideoBtn" label="Close" click="hideVideo()" x="{playPauseBtn.width+replayBtn.width+20}" />
		</s:Group>
	</s:BorderContainer>
	
	<mx:UIComponent	id="videoBtnContainer" x="0" y="0"/>

	<!-- About Screen -->
	<s:BorderContainer id="aboutScreen" x="{30}" y="{30}" width="{this.width-(2*aboutScreen.x)}" height="{this.height-(2*aboutScreen.y)}" cornerRadius="5" styleName="sansFontClass" visible="false" depth="800">
		<s:filters>
			<s:DropShadowFilter 
				blurX="25" blurY="25" 
				alpha="0.8" />
		</s:filters>
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xf0f0f0"/>
				<s:GradientEntry color="0xd8d8d8"/>
			</s:LinearGradient>
		</s:backgroundFill>
		<s:Label text="About Inference" width="{aboutScreen.width}" y="20" fontSize="22" textAlign="center"/>
		<mx:Text selectable="true" x="50" y="50" width="{aboutScreen.width-100}" htmlText="{kCreditsTextHTML}" fontSize="13" />
		<s:Button x="{(aboutScreen.width-90)/2}" y="215" width="90" height="30" label="OK" click="aboutScreen.visible=false;" fontSize="12" fontWeight="bold"/>
	</s:BorderContainer>

	<!-- Error message for bad version of flash player -->	
	<s:BorderContainer id="BrickWall" visible="false" x="0" y="0"
					   width="575"
					   height="327" depth="999">
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x13B3C2"/>
				<s:GradientEntry color="0x1E5B77"/>
			</s:LinearGradient>
		</s:backgroundFill>
		
		<s:Label id="topLabelError" x="0" y="30" width="575"
				 color="0xffffff" fontFamily="Georgia" fontSize="20" fontWeight="bold"
				 text="You are using an outdated version of Adobe Flash Player." textAlign="center"/>
		<s:Label id="midLabelError" x="0" y="100" width="575"
				 color="0xffffff" fontFamily="Georgia" fontSize="15"
				 text="{'Inference Games requires Flash Player '+ kMinimumRequiredVersion +' or later.'}"
				 textAlign="center"/>
		<s:Label id="midLabel2Error" x="0" y="120" width="575"
				 color="0xffffff" fontFamily="Georgia" fontSize="15"
				 text="{'You are currently using Flash Player ' + VersionChecker.getVersion()}"
				 textAlign="center"/>
		<s:Button id="upgradeButton" x="{(575-350)/2}" y="190" width="350"
				  height="50" fontFamily="Georgia" label="Upgrade Flash Player" click="VersionChecker.openAdobeWebsite()"
				  enabled="true" fontSize="25"/>
		<s:Button id="ignoreButton" x="{(575-350)/2}" y="250" width="350"
				  height="30" fontFamily="Georgia" label="Ignore Warning" click="startUp()" enabled="true" fontSize="12"/>
	</s:BorderContainer>
	
</s:Application>
